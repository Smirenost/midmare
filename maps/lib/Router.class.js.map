{"version":3,"sources":["lib/Router.class.js","../lib/Router.class.ts"],"names":["Object","defineProperty","exports","value","Router","Route_class_1","require","Application_class_1","Router_1","[object Object]","options","this","stack","params","path","middleware","hasPath","Array","isArray","some","fn","TypeError","forEach","mw","router","cloneRouter","assign","create","prototype","slice","j","length","nestedRoute","cloneRoute","Route","setPrefix","prefix","push","paramArr","routerParams","key","param","setRouterParams","keys","register","end","ignoreCaptures","route","name","sensitive","strict","i","routes","len","matched","match","dispatch","ctx","next","routerPath","routeChain","apply","matchedRoutes","mostSpecificRoute","_matchedRoute","_matchedRouteName","reduce","memo","captures","routerName","concat","Application","createCompose","then","__handleEnd","catch","error","RegExp","call","arguments"],"mappings":"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","file":"../../lib/Router.class.js","sourcesContent":["\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.Router=void 0;const Route_class_1=require(\"./Route.class\"),Application_class_1=require(\"./Application.class\");var Router;!function(t){class e{constructor(t){this.options=t,this.stack=[],this.params={}}use(t,s){s=\"function\"==typeof t?t:s;const r=\"string\"==typeof t;if((s=Array.isArray(s)?s:[s]).some(t=>\"function\"!=typeof t))throw new TypeError(\"Middleware should be function or array of functions.\");return s.forEach(s=>{if(s.router){const o=Object.assign(Object.create(e.prototype),s.router,{stack:s.router.stack.slice(0)});for(let e=0;e<o.stack.length;e++){const s=o.stack[e],a=Object.assign(Object.create(Route_class_1.Route.Route.prototype),s);r&&a.setPrefix(t),this.options.prefix&&a.setPrefix(this.options.prefix),this.stack.push(a),o.stack[e]=a}if(this.params){(t=>{const e=t;for(let t=0;t<e.length;t++){const s=e[t];o.param(s,this.params[s])}})(Object.keys(this.params))}}else this.register(r?t:\"(.*)\",s,{end:!1,ignoreCaptures:!r})}),this}register(t,e,s={}){const r=this.stack,o=new Route_class_1.Route.Route(t,e,{end:!!s.end||s.end,name:s.name,sensitive:s.sensitive||this.options.sensitive||!1,strict:s.strict||this.options.strict||!1,prefix:s.prefix||this.options.prefix||\"\",ignoreCaptures:s.ignoreCaptures});this.options.prefix&&o.setPrefix(this.options.prefix);for(let t=0;t<Object.keys(this.params).length;t++){const e=Object.keys(this.params)[t];o.param(e,this.params[e])}return r.push(o),o}route(t){const e=this.stack;for(let s=e.length,r=0;r<s;r++)if(e[r].name&&e[r].name===t)return e[r];return!1}match(t){const e=this.stack;let s;const r={path:[],route:!1};for(let o=e.length,a=0;a<o;a++)s=e[a],s.match(t)&&(r.path.push(s),r.route=!0);return r}param(t,e){this.params[t]=e;for(let s=0;s<this.stack.length;s++){this.stack[s].param(t,e)}return this}routes(){const t=this;let e=(e,s)=>{const r=t.options.routerPath||e.routerPath||e.path,o=t.match(r);let a;if(e.matched?e.matched.push.apply(e.matched,o.path):e.matched=o.path,e.router=t,!o.route)return s();const i=o.path,n=i[i.length-1];return e._matchedRoute=n.path,n.name&&(e._matchedRouteName=n.name),a=i.reduce((t,e)=>(t.push((t,s)=>(t.captures=e.captures(r),t.params=e.params(t.captures,t.params),t.routerName=e.name,s())),t.concat(e.stack)),[]),Application_class_1.Application.Application.createCompose(a)(e,s).then(()=>e.__handleEnd()).catch(e.error)};return e.router=t,e}process(t,e,s){return\"string\"==typeof e||e instanceof RegExp?s=Array.prototype.slice.call(arguments,2):(s=Array.prototype.slice.call(arguments,1),e=t,t=null),this.register(e,s,{name:t}),this}}t.Router=e}(Router=exports.Router||(exports.Router={}));\n//# sourceMappingURL=../maps/lib/Router.class.js.map\n","import {Route} from \"./Route.class\";\nimport {Middleware} from \"./Middleware.class\";\nimport {Application} from \"./Application.class\";\n\nexport namespace Router {\n    export class Router {\n        protected stack: Route.Route[] = [];\n        protected params = {};\n\n        constructor(protected options: IOptions) {\n        }\n\n        public use(path: Path | Middleware.Middleware | Middleware.Middleware[] | null, middleware?: Middleware.Middleware | Middleware.Middleware[]) {\n            middleware = typeof path === 'function' ? path : middleware;\n            const hasPath = typeof path === 'string';\n\n            middleware = Array.isArray(middleware) ? middleware : [middleware!];\n\n            if (middleware.some(fn => typeof fn !== \"function\")) throw new TypeError('Middleware should be function or array of functions.');\n\n            middleware.forEach(mw => {\n                if (mw.router) {\n                    const cloneRouter: Router = Object.assign(Object.create(Router.prototype), mw.router, {\n                        stack: mw.router.stack.slice(0)\n                    });\n\n                    for (let j = 0; j < cloneRouter.stack.length; j++) {\n                        const nestedRoute = cloneRouter.stack[j];\n                        const cloneRoute = Object.assign(\n                            Object.create(Route.Route.prototype),\n                            nestedRoute\n                        );\n\n                        if (hasPath) cloneRoute.setPrefix(path);\n                        if (this.options.prefix) cloneRoute.setPrefix(this.options.prefix);\n                        this.stack.push(cloneRoute);\n                        cloneRouter.stack[j] = cloneRoute;\n                    }\n\n                    if (this.params) {\n                        const setRouterParams = (paramArr) => {\n                            const routerParams = paramArr;\n                            for (let j = 0; j < routerParams.length; j++) {\n                                const key = routerParams[j];\n                                cloneRouter.param(key, this.params[key]);\n                            }\n                        };\n\n                        setRouterParams(Object.keys(this.params));\n                    }\n                } else {\n                    this.register(hasPath ? path as Path : '(.*)', mw, {\n                        end: false,\n                        ignoreCaptures: !hasPath\n                    } as IOptions);\n                }\n            });\n            return this;\n        }\n\n        public register(path: Path, middleware: Middleware.Middleware | Middleware.Middleware[], options: IOptions = {} as IOptions) {\n            const stack = this.stack;\n\n            const route = new Route.Route(path, middleware, {\n                end: !options.end ? options.end : true,\n                name: options.name,\n                sensitive: options.sensitive || this.options.sensitive || false,\n                strict: options.strict || this.options.strict || false,\n                prefix: options.prefix || this.options.prefix || \"\",\n                ignoreCaptures: options.ignoreCaptures\n            });\n\n            if (this.options.prefix) {\n                route.setPrefix(this.options.prefix);\n            }\n\n\n            for (let i = 0; i < Object.keys(this.params).length; i++) {\n                const param = Object.keys(this.params)[i];\n                route.param(param, this.params[param]);\n            }\n\n            stack.push(route);\n\n            return route;\n        }\n\n        public route(name) {\n            const routes = this.stack;\n            for (let len = routes.length, i = 0; i < len; i++) {\n                if (routes[i].name && routes[i].name === name) return routes[i];\n            }\n            return false;\n        }\n\n        public match(path) {\n            const routes = this.stack;\n            let route: Route.Route;\n            const matched = {\n                path: [] as Route.Route[],\n                route: false\n            };\n\n            for (let len = routes.length, i = 0; i < len; i++) {\n                route = routes[i];\n\n                if (route.match(path)) {\n                    matched.path.push(route);\n                    matched.route = true;\n                }\n            }\n\n            return matched;\n        }\n\n        public param(param, middleware) {\n            this.params[param] = middleware;\n            for (let i = 0; i < this.stack.length; i++) {\n                const route = this.stack[i];\n                route.param(param, middleware);\n            }\n\n            return this;\n        }\n\n        public routes() {\n            const router = this;\n\n            let dispatch: Middleware.Middleware = (ctx, next) => {\n                const path = router.options.routerPath || ctx.routerPath || ctx.path;\n\n                const matched = router.match(path);\n                let routeChain;\n\n                if (ctx.matched) {\n                    ctx.matched.push.apply(ctx.matched, matched.path);\n                } else {\n                    ctx.matched = matched.path;\n                }\n\n                ctx.router = router;\n\n                if (!matched.route) return next();\n\n                const matchedRoutes = matched.path;\n                const mostSpecificRoute = matchedRoutes[matchedRoutes.length - 1];\n                ctx._matchedRoute = mostSpecificRoute.path;\n                if (mostSpecificRoute.name) {\n                    ctx._matchedRouteName = mostSpecificRoute.name;\n                }\n\n                routeChain = matchedRoutes.reduce((memo, route) => {\n                    memo.push((ctx, next) => {\n                        ctx.captures = route.captures(path);\n                        ctx.params = route.params(ctx.captures, ctx.params);\n                        ctx.routerName = route.name;\n                        return next();\n                    });\n                    return memo.concat(route.stack);\n                }, [] as Middleware.Middleware[]);\n\n                return Application.Application.createCompose(routeChain)(ctx, next).then(() => ctx.__handleEnd()).catch(ctx.error);\n            };\n\n            dispatch.router = router;\n\n            return dispatch;\n        }\n\n        public process(name?: any, path?: any, middleware?: Middleware.Middleware | Middleware.Middleware[]) {\n            if (typeof path === \"string\" || path instanceof RegExp) {\n                middleware = Array.prototype.slice.call(arguments, 2);\n            } else {\n                middleware = Array.prototype.slice.call(arguments, 1);\n                path = name;\n                name = null;\n            }\n\n            this.register(path, middleware!, {\n                name: name\n            } as IOptions);\n\n            return this;\n        }\n    }\n\n    export interface IOptions {\n        prefix?: string;\n        strict?: string;\n        sensitive?: string;\n        ignoreCaptures?: boolean;\n        end?: boolean;\n        name?: string;\n        routerPath?: string;\n        onError?: (...args: any[]) => void;\n    }\n\n    export type Path = string;\n}"]}